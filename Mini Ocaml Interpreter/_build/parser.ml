type token =
  | ASSIGN
  | MATCH
  | WITH
  | PIPE
  | FALSE
  | TRUE
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | MULT
  | CONCAT
  | LET
  | REC
  | IN
  | GT
  | LT
  | LTQ
  | GTQ
  | EQ
  | NEQ
  | AND
  | COMMA
  | VAR of (string)
  | CONSTR of (string)
  | STRING of (string)
  | INT of (string)
  | LPAREN
  | RPAREN
  | ARROW
  | FUN
  | UNIT
  | EOF
  | TYPE
  | OF
  | TVAR of (string)
  | TUNIT
  | TINT
  | TBOOL
  | TSTRING
  | TCONS

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* This parser is implemented with ocamlyacc, not menhir. *)

open Ast
open TypedAst
open Lexing

let parse_error _ =
  let start_pos = Parsing.symbol_start_pos () in
  let end_pos = Parsing.symbol_end_pos () in
  let start_line = string_of_int start_pos.pos_lnum in
  let start_char = string_of_int (start_pos.pos_cnum - start_pos.pos_bol) in
  let end_line = string_of_int end_pos.pos_lnum in
  let end_char = string_of_int (end_pos.pos_cnum - end_pos.pos_bol) in
  failwith ("Parse error: ("^start_line^"."^start_char^"-"^end_line^"."^end_char)
# 63 "parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* MATCH *);
  259 (* WITH *);
  260 (* PIPE *);
  261 (* FALSE *);
  262 (* TRUE *);
  263 (* IF *);
  264 (* THEN *);
  265 (* ELSE *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* MULT *);
  269 (* CONCAT *);
  270 (* LET *);
  271 (* REC *);
  272 (* IN *);
  273 (* GT *);
  274 (* LT *);
  275 (* LTQ *);
  276 (* GTQ *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* AND *);
  280 (* COMMA *);
  285 (* LPAREN *);
  286 (* RPAREN *);
  287 (* ARROW *);
  288 (* FUN *);
  289 (* UNIT *);
    0 (* EOF *);
  290 (* TYPE *);
  291 (* OF *);
  293 (* TUNIT *);
  294 (* TINT *);
  295 (* TBOOL *);
  296 (* TSTRING *);
  297 (* TCONS *);
    0|]

let yytransl_block = [|
  281 (* VAR *);
  282 (* CONSTR *);
  283 (* STRING *);
  284 (* INT *);
  292 (* TVAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\006\000\006\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\008\000\008\000\003\000\003\000\004\000\004\000\004\000\009\000\
\009\000\005\000\005\000\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\001\000\002\000\004\000\004\000\005\000\006\000\007\000\003\000\
\002\000\003\000\005\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\001\000\002\000\003\000\004\000\
\001\000\003\000\005\000\006\000\000\000\001\000\003\000\001\000\
\003\000\003\000\005\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\003\000\000\000\000\000\017\000\000\000\005\000\002\000\000\000\
\000\000\001\000\000\000\045\000\000\000\042\000\038\000\039\000\
\040\000\041\000\000\000\000\000\062\000\000\000\054\000\063\000\
\000\000\064\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\034\000\033\000\030\000\000\000\035\000\032\000\000\000\
\031\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\057\000\000\000\021\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\059\000\029\000\
\037\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\027\000"

let yydgoto = "\006\000\
\053\000\027\000\029\000\032\000\034\000\098\000\099\000\055\000\
\061\000"

let yysindex = "\098\000\
\001\255\036\255\030\255\238\254\061\255\000\000\001\255\000\000\
\000\000\001\255\253\254\000\000\001\255\000\000\000\000\001\255\
\014\255\000\000\000\002\000\000\036\255\000\000\000\000\000\000\
\000\000\000\000\011\255\238\254\000\000\069\255\000\000\000\000\
\071\255\000\000\126\255\164\255\082\255\087\255\000\000\202\255\
\078\255\001\255\001\255\001\255\001\255\001\255\001\255\001\255\
\001\255\001\255\001\255\001\255\000\000\058\255\246\254\036\255\
\000\000\036\255\090\255\096\255\091\255\036\255\052\255\001\255\
\102\255\001\255\000\000\001\255\068\002\068\002\059\002\085\255\
\085\255\085\255\085\255\085\255\085\255\085\255\050\002\000\000\
\036\255\099\255\101\255\011\255\109\255\069\255\000\000\013\255\
\084\002\000\000\000\000\000\000\084\002\000\000\000\000\084\002\
\000\000\000\000\035\255\137\001\001\255\166\001\025\002\011\255\
\000\000\005\255\000\000\061\255\000\000\000\000\038\255\084\002\
\001\255\001\255\195\001\001\255\061\255\000\000\000\000\000\000\
\000\000\227\001\025\002\001\255\025\002\000\000\084\002\025\002\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\134\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\135\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\255\000\000\000\000\
\000\000\000\000\000\000\127\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\063\000\001\000\094\000\
\125\000\156\000\187\000\218\000\249\000\024\001\055\001\000\000\
\000\000\000\000\068\001\002\000\000\000\000\000\000\000\160\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\001\062\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\122\000\092\001\000\000\107\001\000\000\000\000\122\001\
\000\000"

let yygindex = "\000\000\
\003\000\235\255\000\000\133\000\232\255\172\255\184\255\000\000\
\076\000"

let yytablesize = 885
let yytable = "\054\000\
\008\000\043\000\007\000\019\000\109\000\008\000\009\000\010\000\
\117\000\035\000\030\000\037\000\036\000\081\000\011\000\039\000\
\108\000\031\000\040\000\082\000\110\000\038\000\056\000\111\000\
\056\000\012\000\013\000\014\000\015\000\016\000\033\000\006\000\
\017\000\018\000\083\000\057\000\084\000\057\000\041\000\121\000\
\088\000\058\000\129\000\058\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\089\000\
\090\000\091\000\112\000\104\000\020\000\112\000\007\000\028\000\
\021\000\113\000\100\000\120\000\102\000\056\000\103\000\022\000\
\023\000\024\000\025\000\026\000\092\000\093\000\094\000\095\000\
\096\000\118\000\057\000\119\000\097\000\050\000\033\000\080\000\
\058\000\008\000\009\000\050\000\126\000\009\000\042\000\043\000\
\044\000\045\000\001\000\002\000\003\000\004\000\005\000\115\000\
\060\000\062\000\065\000\066\000\068\000\012\000\013\000\014\000\
\015\000\016\000\085\000\122\000\123\000\018\000\125\000\086\000\
\087\000\028\000\101\000\105\000\010\000\057\000\128\000\007\000\
\063\000\106\000\008\000\009\000\010\000\053\000\060\000\042\000\
\043\000\044\000\045\000\011\000\061\000\053\000\046\000\047\000\
\048\000\049\000\050\000\051\000\049\000\052\000\012\000\013\000\
\014\000\015\000\016\000\011\000\056\000\017\000\018\000\058\000\
\059\000\107\000\000\000\000\000\000\000\007\000\000\000\000\000\
\008\000\009\000\010\000\064\000\000\000\042\000\043\000\044\000\
\045\000\011\000\000\000\000\000\046\000\047\000\048\000\049\000\
\050\000\051\000\012\000\052\000\012\000\013\000\014\000\015\000\
\016\000\000\000\000\000\017\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\008\000\009\000\
\010\000\000\000\000\000\042\000\043\000\044\000\045\000\011\000\
\000\000\013\000\046\000\047\000\048\000\049\000\050\000\051\000\
\000\000\052\000\012\000\013\000\014\000\015\000\016\000\067\000\
\000\000\017\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\008\000\043\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\
\008\000\043\000\000\000\000\000\000\000\000\000\008\000\043\000\
\008\000\006\000\006\000\006\000\000\000\000\000\006\000\006\000\
\006\000\006\000\006\000\000\000\006\000\006\000\000\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\024\000\006\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
\007\000\007\000\007\000\044\000\000\000\007\000\007\000\007\000\
\007\000\007\000\019\000\007\000\007\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\000\000\
\000\000\000\000\000\000\016\000\007\000\000\000\007\000\009\000\
\009\000\009\000\000\000\000\000\009\000\009\000\009\000\000\000\
\000\000\000\000\022\000\009\000\000\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\000\000\009\000\000\000\000\000\
\000\000\023\000\000\000\009\000\028\000\009\000\010\000\010\000\
\010\000\028\000\028\000\010\000\010\000\010\000\000\000\000\000\
\000\000\028\000\010\000\000\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\000\000\000\000\028\000\
\000\000\000\000\010\000\000\000\010\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\011\000\000\000\000\000\000\000\
\000\000\011\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\011\000\012\000\012\000\012\000\000\000\
\000\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\
\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\012\000\013\000\013\000\013\000\000\000\000\000\
\013\000\013\000\013\000\000\000\000\000\000\000\000\000\013\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\013\000\014\000\014\000\014\000\000\000\000\000\014\000\
\014\000\014\000\000\000\000\000\000\000\000\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\014\000\015\000\015\000\015\000\000\000\000\000\015\000\015\000\
\015\000\000\000\000\000\000\000\000\000\015\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\000\000\015\000\
\024\000\024\000\024\000\000\000\000\000\024\000\024\000\024\000\
\000\000\000\000\000\000\000\000\024\000\000\000\024\000\044\000\
\000\000\000\000\000\000\000\000\000\000\019\000\019\000\044\000\
\000\000\000\000\019\000\019\000\024\000\000\000\024\000\000\000\
\019\000\000\000\019\000\044\000\000\000\000\000\016\000\016\000\
\000\000\044\000\044\000\016\000\016\000\000\000\000\000\000\000\
\019\000\016\000\000\000\016\000\000\000\022\000\022\000\000\000\
\000\000\000\000\022\000\022\000\000\000\000\000\000\000\000\000\
\022\000\016\000\022\000\000\000\023\000\023\000\000\000\000\000\
\000\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
\022\000\023\000\007\000\000\000\000\000\008\000\009\000\010\000\
\000\000\114\000\042\000\043\000\044\000\045\000\011\000\023\000\
\000\000\046\000\047\000\048\000\049\000\050\000\051\000\000\000\
\052\000\012\000\013\000\014\000\015\000\016\000\000\000\007\000\
\017\000\018\000\008\000\009\000\010\000\000\000\000\000\042\000\
\043\000\044\000\045\000\011\000\000\000\116\000\046\000\047\000\
\048\000\049\000\050\000\051\000\000\000\052\000\012\000\013\000\
\014\000\015\000\016\000\000\000\007\000\017\000\018\000\008\000\
\009\000\010\000\000\000\000\000\042\000\043\000\044\000\045\000\
\011\000\000\000\124\000\046\000\047\000\048\000\049\000\050\000\
\051\000\000\000\052\000\012\000\013\000\014\000\015\000\016\000\
\000\000\000\000\017\000\018\000\007\000\000\000\127\000\008\000\
\009\000\010\000\000\000\000\000\042\000\043\000\044\000\045\000\
\011\000\000\000\000\000\046\000\047\000\048\000\049\000\050\000\
\051\000\000\000\052\000\012\000\013\000\014\000\015\000\016\000\
\000\000\007\000\017\000\018\000\008\000\009\000\010\000\000\000\
\000\000\042\000\043\000\044\000\045\000\011\000\000\000\000\000\
\046\000\047\000\048\000\049\000\050\000\051\000\000\000\052\000\
\012\000\013\000\014\000\015\000\016\000\008\000\009\000\017\000\
\018\000\000\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\046\000\047\000\048\000\049\000\050\000\051\000\000\000\
\052\000\012\000\013\000\014\000\015\000\016\000\008\000\009\000\
\000\000\018\000\000\000\042\000\043\000\044\000\045\000\008\000\
\009\000\000\000\046\000\047\000\048\000\049\000\050\000\051\000\
\008\000\009\000\012\000\013\000\014\000\015\000\016\000\044\000\
\000\000\000\000\018\000\012\000\013\000\014\000\015\000\016\000\
\090\000\091\000\000\000\018\000\012\000\013\000\014\000\015\000\
\016\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\092\000\093\000\094\000\095\000\
\096\000\000\000\000\000\000\000\097\000"

let yycheck = "\021\000\
\000\000\000\000\002\001\001\000\089\000\005\001\006\001\007\001\
\004\001\007\000\029\001\015\001\010\000\024\001\014\001\013\000\
\004\001\036\001\016\000\030\001\093\000\025\001\012\001\096\000\
\012\001\025\001\026\001\027\001\028\001\029\001\026\001\000\000\
\032\001\033\001\056\000\025\001\058\000\025\001\025\001\112\000\
\062\000\031\001\127\000\031\001\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\004\001\
\005\001\006\001\024\001\081\000\025\001\024\001\000\000\034\001\
\029\001\031\001\064\000\030\001\066\000\012\001\068\000\036\001\
\037\001\038\001\039\001\040\001\025\001\026\001\027\001\028\001\
\029\001\106\000\025\001\108\000\033\001\024\001\026\001\030\001\
\031\001\005\001\006\001\030\001\117\000\000\000\010\001\011\001\
\012\001\013\001\001\000\002\000\003\000\004\000\005\000\101\000\
\036\001\035\001\025\001\021\001\031\001\025\001\026\001\027\001\
\028\001\029\001\025\001\113\000\114\000\033\001\116\000\024\001\
\030\001\000\000\021\001\025\001\000\000\025\001\124\000\002\001\
\003\001\021\001\005\001\006\001\007\001\000\000\000\000\010\001\
\011\001\012\001\013\001\014\001\000\000\025\001\017\001\018\001\
\019\001\020\001\021\001\022\001\024\001\024\001\025\001\026\001\
\027\001\028\001\029\001\000\000\030\001\032\001\033\001\000\000\
\028\000\086\000\255\255\255\255\255\255\002\001\255\255\255\255\
\005\001\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\000\000\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\005\001\006\001\
\007\001\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\000\000\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\004\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\000\000\
\024\001\024\001\255\255\255\255\255\255\255\255\030\001\030\001\
\032\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\000\000\024\001\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\032\001\
\002\001\003\001\004\001\000\000\255\255\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\000\000\030\001\255\255\032\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\255\255\
\255\255\255\255\000\000\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\255\255\255\255\
\255\255\000\000\255\255\030\001\003\001\032\001\002\001\003\001\
\004\001\008\001\009\001\007\001\008\001\009\001\255\255\255\255\
\255\255\016\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\255\255\255\255\030\001\
\255\255\255\255\030\001\255\255\032\001\002\001\003\001\004\001\
\255\255\255\255\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\002\001\003\001\004\001\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\030\001\
\255\255\032\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\032\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\032\001\
\002\001\003\001\004\001\255\255\255\255\007\001\008\001\009\001\
\255\255\255\255\255\255\255\255\014\001\255\255\016\001\004\001\
\255\255\255\255\255\255\255\255\255\255\003\001\004\001\012\001\
\255\255\255\255\008\001\009\001\030\001\255\255\032\001\255\255\
\014\001\255\255\016\001\024\001\255\255\255\255\003\001\004\001\
\255\255\030\001\031\001\008\001\009\001\255\255\255\255\255\255\
\030\001\014\001\255\255\016\001\255\255\003\001\004\001\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\030\001\016\001\255\255\003\001\004\001\255\255\255\255\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\014\001\
\030\001\016\001\002\001\255\255\255\255\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\030\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\002\001\
\032\001\033\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\002\001\032\001\033\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\032\001\033\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\002\001\032\001\033\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\005\001\006\001\032\001\
\033\001\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\005\001\006\001\
\255\255\033\001\255\255\010\001\011\001\012\001\013\001\005\001\
\006\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\005\001\006\001\025\001\026\001\027\001\028\001\029\001\012\001\
\255\255\255\255\033\001\025\001\026\001\027\001\028\001\029\001\
\005\001\006\001\255\255\033\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\033\001"

let yynames_const = "\
  ASSIGN\000\
  MATCH\000\
  WITH\000\
  PIPE\000\
  FALSE\000\
  TRUE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  CONCAT\000\
  LET\000\
  REC\000\
  IN\000\
  GT\000\
  LT\000\
  LTQ\000\
  GTQ\000\
  EQ\000\
  NEQ\000\
  AND\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  ARROW\000\
  FUN\000\
  UNIT\000\
  EOF\000\
  TYPE\000\
  OF\000\
  TUNIT\000\
  TINT\000\
  TBOOL\000\
  TSTRING\000\
  TCONS\000\
  "

let yynames_block = "\
  VAR\000\
  CONSTR\000\
  STRING\000\
  INT\000\
  TVAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
           (Unit)
# 478 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
           (Int (int_of_string _1))
# 485 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
           (Bool true)
# 491 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
           (Bool false)
# 497 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
           (String _1)
# 504 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 99 "parser.mly"
                        ( BinOp (Plus,   _1, _3) )
# 512 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 100 "parser.mly"
                        ( BinOp (Minus,  _1, _3) )
# 520 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 101 "parser.mly"
                        ( BinOp (Times,  _1, _3) )
# 528 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 102 "parser.mly"
                        ( BinOp (Concat, _1, _3) )
# 536 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 103 "parser.mly"
                        ( BinOp (Gt,     _1, _3) )
# 544 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 104 "parser.mly"
                        ( BinOp (Lt,     _1, _3) )
# 552 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 105 "parser.mly"
                        ( BinOp (LtEq,   _1, _3) )
# 560 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 106 "parser.mly"
                        ( BinOp (GtEq,   _1, _3) )
# 568 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 107 "parser.mly"
                        ( BinOp (Eq,     _1, _3) )
# 576 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 108 "parser.mly"
                        ( BinOp (NotEq,  _1, _3) )
# 584 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 110 "parser.mly"
           ( If (_2, _4, _6) )
# 593 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
           ( Var _1 )
# 600 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 113 "parser.mly"
           ( App (_1, _2) )
# 608 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 115 "parser.mly"
           ( Fun (_2,_4) )
# 616 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_matching) in
    Obj.repr(
# 117 "parser.mly"
           ( Match (_2, _4) )
# 624 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_matching) in
    Obj.repr(
# 119 "parser.mly"
           ( Match (_2, _5) )
# 632 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 121 "parser.mly"
           ( Let (_2,_4,_6) )
# 641 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 123 "parser.mly"
           ( LetRec (_3,_5,_7) )
# 650 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 125 "parser.mly"
           ( Pair (_1,_3) )
# 658 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 127 "parser.mly"
           ( Variant (_1,_2) )
# 666 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 129 "parser.mly"
           ( _2 )
# 673 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_matching) in
    Obj.repr(
# 134 "parser.mly"
           ( (_1, _3)::_5 )
# 682 "parser.ml"
               : 'pattern_matching))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 136 "parser.mly"
           ( [(_1, _3)]   )
# 690 "parser.ml"
               : 'pattern_matching))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 140 "parser.mly"
                          (_2)
# 697 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parser.mly"
                          (PVar _1)
# 704 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                          (PUnit)
# 710 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 143 "parser.mly"
                          (PInt (int_of_string _1))
# 717 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
                          (PBool true)
# 723 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                          (PBool false)
# 729 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
                          (PString _1)
# 736 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 148 "parser.mly"
                          (PVariant (_1,_2))
# 744 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 150 "parser.mly"
                          (PPair (_1,_3))
# 752 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
          (TUnit)
# 758 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                         (TInt)
# 764 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                                        (TBool)
# 770 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                                                          (TString)
# 776 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
          ( TAlpha _1 )
# 783 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : TypedAst.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : TypedAst.typ) in
    Obj.repr(
# 156 "parser.mly"
                  ( TArrow (_1,_3) )
# 791 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : TypedAst.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : TypedAst.typ) in
    Obj.repr(
# 157 "parser.mly"
                  ( TStar  (_1,_3) )
# 799 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
        ( TVariant ([], _1) )
# 806 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : TypedAst.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 159 "parser.mly"
            ( TVariant ([_1], _2) )
# 814 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : TypedAst.typ) in
    Obj.repr(
# 160 "parser.mly"
                      ( _2 )
# 821 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "parser.mly"
        ( TVariant (_2, _4) )
# 829 "parser.ml"
               : TypedAst.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : TypedAst.typ) in
    Obj.repr(
# 166 "parser.mly"
        ([_1])
# 836 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : TypedAst.typ) in
    Obj.repr(
# 167 "parser.mly"
                       (_1@[_3])
# 844 "parser.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : (string * TypedAst.typ) list) in
    Obj.repr(
# 172 "parser.mly"
       ( {vars = _2; name = _3; constructors = _5} )
# 853 "parser.ml"
               : TypedAst.variant_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : (string * TypedAst.typ) list) in
    Obj.repr(
# 174 "parser.mly"
       ( {vars = _2; name = _3; constructors = _6} )
# 862 "parser.ml"
               : TypedAst.variant_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
    ([])
# 868 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 179 "parser.mly"
         ([_1])
# 875 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tvar_list_inside) in
    Obj.repr(
# 180 "parser.mly"
                                   (_2)
# 882 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "parser.mly"
         ([_1])
# 889 "parser.ml"
               : 'tvar_list_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tvar_list_inside) in
    Obj.repr(
# 185 "parser.mly"
                                (_1::_3)
# 897 "parser.ml"
               : 'tvar_list_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : TypedAst.typ) in
    Obj.repr(
# 189 "parser.mly"
                  ( [(_1,_3)] )
# 905 "parser.ml"
               : (string * TypedAst.typ) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : TypedAst.typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : (string * TypedAst.typ) list) in
    Obj.repr(
# 190 "parser.mly"
                                   ((_1,_3)::_5)
# 914 "parser.ml"
               : (string * TypedAst.typ) list))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry typ *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry variant_spec *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry tvar_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry constr_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
let typ (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : TypedAst.typ)
let variant_spec (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : TypedAst.variant_spec)
let tvar_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : string list)
let constr_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : (string * TypedAst.typ) list)
